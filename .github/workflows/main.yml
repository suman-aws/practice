# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:


  # Triggers the workflow on push or pull request events but only for the main branch
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environ:
        description: "Env of the deployment(Int,qa or prod) as suffix" 
        type: choice
        required: true
        options:
          - INT
          - QA
          - PROD
      models_to_be_deployed:
        description: "Models to deploy"
        required: true
        default: "INT Models, QA Modles"
      Model_Version:
        description: "Second set of applications to deploy"
        required: true
        default: "1.0,2.0"  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

#       # Runs a set of commands using the runners shell
      - name: get
        id: step1
      - name: Prepare applications1 list to deploy
        run: |
          echo -e 'outputtemp1 = list("${{ github.event.inputs.models_to_be_deployed }}".split(","))\nprint ( "::set-output name=applications1_to_be_deployed::", outputtemp1 )' | python3
      - name: Prepare applications2 list to deploy
        id: step2
        run: |
          echo -e 'outputtemp2 = list("${{ github.event.inputs.Model_Version }}".split(","))\nprint ( "::set-output name=applications2_to_be_deployed::", outputtemp2 )' | python3
    outputs:
      models_to_be_deployed: ${{ steps.step1.outputs.applications1_to_be_deployed}}
      Model_Version: ${{ steps.step2.outputs.applications2_to_be_deployed}}

#   - name: Performing  authentication
#     shell: bash
#     env:
#       env: ${{github.event.inputs.environ}}
#       run: |
#         if [[ $env == *"INT"* ]]; then
#            echo "INT models present; Authenticating for  7"

#         else
#            echo "No INT models present; hence not authenticating for  7"
#         fi
#         if [[ $env == *"QA"* ]]; then
#            echo "No QA models present; hence  authenticating for  5"
#         else
#            echo "No QA models present; hence not authenticating for  5"
#         fi
#         if [[ $env == *"PROD"* ]]; then
#            echo "PROD models present; Authenticating for  5"
#         else
#            echo "No PROD models present; hence not authenticating for  5"
#         fi
#   - name: Upload the model code to HSI env
#     shell: bash
#     env:
#       env: ${{github.event.inputs.environ}}
#     run: |        
#       if [[ $model[i] == *"Apple"* ]]; then
      
# #       - name: Set the value
# #         id: step1
# #         run: |
# #           echo "models_list= $(python3 new.py)" >> $GITHUB_ENV
# #       - name: get the value
# #         id: step2
# #         run: |
# #           echo "model_details :"${{ env.models_list }}""
      



