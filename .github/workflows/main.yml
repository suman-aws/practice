name: Models-to-deploy
# Controls when the workflow will run
on:
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      models_to_be_deployed:
        description: "Models to deploy"
        required: true
        default: "Model1,Model2"  
      Model_version :
        description: "Model version"
        required: true
        default: "1.o,2.0"
      environ:
        description: "Env of the deployment(INT,QA or PROD) as suffix" 
        type: choice
        required: true
        options:
          - INT
          - QA
          - PROD

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  ################################
  # preRequest                   #
  ################################
  envPrepare:
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Prepare applications list to deploy
        id: step1
        run: |
          echo -e 'outputtemp = list("${{ github.event.inputs.models_to_be_deployed }}".split(","))\nprint ( "::set-output name=models_to_be_deployed::", outputtemp )' | python3
      - name: Prepare CF applications list to deploy
        id: step2
        run: |
         echo -e 'outputtemp = list("${{ github.event.inputs.Model_version }}".split(","))\nprint ( "::set-output name=Model_version::", outputtemp )' | python3
    outputs:
      Model_version: ${{ steps.step2.outputs.Model_version }}
      models_to_be_deployed: ${{ steps.step1.outputs.models_to_be_deployed}}
################################
# Download Artefacts           #
################################

  downloadArtefacts:
    name: Artefacts
    runs-on: ubuntu-latest
    needs: envPrepare

    strategy:
      fail-fast: false
#       matrix:
#         models_to_be_deployed: ${{fromJson(needs.envPrepare.outputs.models_to_be_deployed)}}
#         Model_version: ${{fromJson(needs.envPrepare.outputs.Model_version)}}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Performing  authentication
        shell: bash
        env:
          env: ${{github.event.inputs.environ}}
        run: |
           if [[ $env == *"INT"* ]]; then
             echo "INT models present; Authenticating for  7"
           else
             echo "No INT models present; hence not authenticating for  7"
           fi
           if [[ $env == *"QA"* ]]; then
             echo "QA models present; hence  authenticating for  5"
           else
             echo "No QA models present; hence not authenticating for  5"
           fi
           if [[ $env == *"PROD"* ]]; then
             echo "PROD models present; Authenticating for  5"
           else
             echo "No PROD models present; hence not authenticating for  5"
           fi

      - name: Upload the model code to  env
        shell: bash
        env:
          model: ${{steps.step1.outputs.models_to_be_deployed}}

        run: |        
         if [[ $model == *"Apple"* ]]; then
            echo "$model"
         fi

 
