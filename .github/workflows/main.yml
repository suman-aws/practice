
# This is a basic workflow to help you get started with Actions

name: models to deploy

# Controls when the workflow will run
on:


  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
#     inputs:
#       environ:
#         description: "Env of the deployment(Int,qa or prod) as suffix" 
#         type: choice
#         required: true
#         options:
#           - INT
#           - QA
#           - PROD
 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

#       # Runs a set of commands using the runners shell
      - name: get
        id: step1
        run: |
          output=$(python new.py)
          OUTPUT="${output[@]}"
          readarray -t Models < <(echo "$OUTPUT")
          #echo "${Models}"
          model="${Models[0]}"
          envir="${Models[1]}"
          version="${Models[2]}"
          table="${Models[3]}"
          envirmode="${Models[4]}"
          #echo "Table_details:$table"
          echo "::set-output name=model_details::$model"
          echo "::set-output name=env_details::$envir"
          echo "::set-output name=table_details::$table"
          echo "::set-output name=enviro_details::$envirmode"
 
      - name: Print model_details
        run: |
          echo "${{ steps.step1.outputs.model_details }}"
          echo "${{ steps.step1.outputs.env_details }}"
          echo "${{ steps.step1.outputs.table_details }}"
          echo "${{ steps.step1.outputs.enviro_details }}"

      - name: Performing  authentication
        shell: bash
        env :
            envir: ${{ steps.step1.outputs.enviro_details }}
        run: |
          if [[ ${envir[@]} == *"int"* ]]; then
            echo " INT models present"
          else
            echo "No INT models present"
          fi
          if [[ ${envir[@]} == *"qa"* ]]; then
            echo "QA models present"
          else
            echo "No QA models present"
          fi
          if [[ ${envir[@]} == *"prod"* ]]; then
            echo "PROD models present"
          else
            echo "No PROD models present"
          fi

      - name: Upload the model code to env
        shell: bash
        env:
           envir: "${{ steps.step1.outputs.env_details }}"
           models_id: "${{steps.step1.outputs.model_details}}"
        run: |
          echo "$models_id"
          if [[ ${models_id[@]} == *"Apple"* ]] ; then
           echo "models present in  qa"
          else
            echo "No models present"
          fi

#       - name: genertate the host
#         shell: bash
#         env:
#            envir: "${{ steps.step1.outputs.env_details }}"
#            models_id: "${{steps.step1.outputs.model_details}}"
#         run: python hs.py -e "${models_id[@]}" -e "${envir[@]}"

      - name: genertate the host
        id: step2
        shell: bash
        run: |
          output=$(python host.py)
          OUTPUT="${output[@]}"
          readarray -t Models < <(echo "$OUTPUT")
          echo "${Models}"
          host="${Models[0]}"
          Env_details="${Models[1]}"
          #sh ./host.sh "${envir[@]}"
          #hostd=$(sh ./host.sh )
          #echo "${host}"
          echo "::set-output name=Host_details::$host"
          echo "::set-output name=Environment_details::$Env_details"
      - name: Print Host_details
        run: |
          echo "${{ steps.step2.outputs.Host_details }}"
          echo "${{ steps.step2.outputs.Environment_details }}"

      - name: test the models 
        shell: bash
        env:
           envir: "${{ steps.step1.outputs.env_details }}"
           models_id: "${{steps.step1.outputs.model_details}}"
           envir_details: "${{ steps.step2.outputs.Environment_details }}"
        run: |
         len=${#envir[@]}
         echo "$len"
         for (( i=0; i<$len; i++ )); do 
            if [[ ${models_id[@]} == *"orange."* ]] ; then
              echo "test the orange models"
            else
              echo "no models "
            fi
            if [[ ${models_id[@]} == *"apple."* ]] ; then
              echo "test the apple models"
            else
              echo "no models "
            fi
         done 
         pwd
        
         mkdir new
         if [[ -d "new" ]]; then
            touch sam
            cat sam
         fi
      - name: test the models 
        shell: bash
        env:
           envir: "${{ steps.step1.outputs.env_details }}"
           models_id: "${{steps.step1.outputs.model_details}}"
           envir_details: "${{ steps.step2.outputs.Environment_details }}"      
        run: |
           if [[ ${models_id[@]} == *"orange."* ]] ; then
              ls -lrt 
              mkdir /home/runner/work/practice/practice/orange
              pwd 
              ls -lrt 
              cd /home/runner/work/practice/practice/orange/
              
              rm -rf /home/runner/work/practice/practice/orange/*
              pwd 
              ls -lrt
              
              cd /home/runner/work/practice/practice/orange
              
              
              git clone https://github.com/wakaleo/game-of-life.git
              
             #/usr/bin/git  git clone git@github.com:suman-aws/practice.git
             #cd /usr/bin/git 
             pwd 
             cd ..
             result=$(python host.py 
                      
             )
             echo $result
           fi 

        
        
                    
                   

          
       
          
