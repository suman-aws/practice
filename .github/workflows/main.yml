
# This is a basic workflow to help you get started with Actions

name: models to deploy

# Controls when the workflow will run
on:


  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
#     inputs:
#       environ:
#         description: "Env of the deployment(Int,qa or prod) as suffix" 
#         type: choice
#         required: true
#         options:
#           - INT
#           - QA
#           - PROD
 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

#       # Runs a set of commands using the runners shell
      - name: get
        id: step1
        run: |
          output=$(python new.py)
          OUTPUT="${output[@]}"
          readarray -t Models < <(echo "$OUTPUT")
          #echo "${Models}"
          model="${Models[0]}"
          envir="${Models[1]}"
          version="${Models[2]}"
          table="${Models[3]}"
          #echo "$OUTPUT"
          #model="${OUTPUT[0]}" 
          #envir="${OUTPUT[1]}"
          #version="${OUTPUT[2]}"
          #table="${OUTPUT[3]}"
          #echo "Model_Details:$model"
          #echo "Environment:$envir"
          #ENVI="${envir[@]}"
          #readarray -t Environm < <(echo "$ENVI")
          #Environ="${Environm[1]}"
          #echo "$Environ"



          #echo "Table_details:$table"
          echo "::set-output name=model_details::$model"
          echo "::set-output name=env_details::$envir"
          echo "::set-output name=table_details::$table"
          #echo "::set-output name=enviro_details::$output"
 
      - name: Print model_details
        run: |
          echo "${{ steps.step1.outputs.model_details }}"
          echo "${{ steps.step1.outputs.env_details }}"
          echo "${{ steps.step1.outputs.table_details }}"

      - name: Performing  authentication
        shell: bash
        env :
            envir: ${{ steps.step1.outputs.env_details }}
        run: |
          if [[ ${envir[@]} == *"abc int"* ]]; then
            echo " INT models present"
          else
            echo "No INT models present"
          fi
          if [[ ${envir[@]} == *"abc qa"* ]]; then
            echo "QA models present"
          else
            echo "No QA models present"
          fi
          if [[ ${envir[@]} == *"abc prod"* ]]; then
            echo "PROD models present"
          else
            echo "No PROD models present"
          fi

      - name: Upload the model code to env
        shell: bash
        env:
           envir: "${{ steps.step1.outputs.env_details }}"
           models_id: "${{steps.step1.outputs.model_details}}"
        run: |
          echo "$models_id"
          if [[ ${models_id[@]} == *"Apple"* ]] ; then
           echo "models present in  qa"
          else
            echo "No models present"
          fi

      - name: genertate the host
        shell: bash
        env:
           envir: "${{ steps.step1.outputs.env_details }}"
           models_id: "${{steps.step1.outputs.model_details}}"
        run: |
          python3 hs.py '$envir' '$models_id'
          
       
          
