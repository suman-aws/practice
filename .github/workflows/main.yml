
# This is a basic workflow to help you get started with Actions

name: models to deploy

# Controls when the workflow will run
on:


  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:
#     inputs:
#       environ:
#         description: "Env of the deployment(Int,qa or prod) as suffix" 
#         type: choice
#         required: true
#         options:
#           - INT
#           - QA
#           - PROD
 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
            ref: ${{ env.tag }}
      # Runs a single command using the runners shell

#       # Runs a set of commands using the runners shell
      - name: Prepare new deployment
        run: |
          python3 new.py > output.txt

      - name: Read and parse output
        id: parse_output
        run: |
          envs=()
          contexts=()
          models=()
          versions=()


          while read line; do
            env=$(echo $line | cut -d "=" -f 1)
            context=$(echo $line | cut -d "=" -f 2)
            model=$(echo $line | cut -d "=" -f 3)
            version=$(echo $line | cut -d "=" -f 4)


            envs+=("$env")
            contexts+=("$context")
            models+=("$model")
            versions+=("$version")

          done < output.txt

          echo "::set-output name=envs::${envs[@]}"
          echo "::set-output name=contexts::${contexts[@]}"
          echo "::set-output name=models::${models[@]}"
          echo "::set-output name=versions::${versions[@]}"


      - name: Show parsed output
        run: |
          echo "Envs: ${{ steps.parse_output.outputs.envs }}"
          echo "Deployment Context: ${{ steps.parse_output.outputs.contexts }}"
          echo "Model Names: ${{ steps.parse_output.outputs.models }}"
          echo "Model Versions: ${{ steps.parse_output.outputs.versions }}"

      - name: SI authentication
        run: |
          if [[ "$envs" == *"abc INT"* ]]; then
            echo "INT models present; hence not authenticating for SI 7"
          else
            echo "No INT models present; hence not authenticating for SI 7"
          fi
          
      #     list=$(python new.py)
      #     ulist+=(list)
      #     echo "${ulist[@]}"
      # - name: Print model_details
      #   run: |
      #     echo "${{ steps.step1.outputs.model_details }}"
      #     echo "${{ steps.step1.outputs.env_details }}"
      #     echo "${{ steps.step1.outputs.table_details }}"
      #     echo "${{ steps.step1.outputs.enviro_details }}"

#       - name: Performing  authentication
#         shell: bash
#         env :
#             envir: ${{ steps.step1.outputs.enviro_details }}
#         run: |
#           if [[ ${envir[@]} == *"int"* ]]; then
#             echo " INT models present"
#           else
#             echo "No INT models present"
#           fi
#           if [[ ${envir[@]} == *"qa"* ]]; then
#             echo "QA models present"
#           else
#             echo "No QA models present"
#           fi
#           if [[ ${envir[@]} == *"prod"* ]]; then
#             echo "PROD models present"
#           else
#             echo "No PROD models present"
#           fi

#       - name: Upload the model code to env
#         shell: bash
#         env:
#            envir: "${{ steps.step1.outputs.env_details }}"
#            models_id: "${{steps.step1.outputs.model_details}}"
#         run: |
#           python host.py
#           echo "$models_id"
#           if [[ ${models_id[@]} == *"Apple"* ]] ; then
#            echo "models present in  qa"
#           else
#             echo "No models present"
#           fi

# #       - name: genertate the host
# #         shell: bash
# #         env:
# #            envir: "${{ steps.step1.outputs.env_details }}"
# #            models_id: "${{steps.step1.outputs.model_details}}"
# #         run: python hs.py -e "${models_id[@]}" -e "${envir[@]}"

#       - name: genertate the host
#         id: step2
#         shell: bash
#         run: |
#           output=$(python host.py)
#           OUTPUT="${output[@]}"
#           readarray -t Models < <(echo "$OUTPUT")
#           echo "${Models}"
#           host="${Models[0]}"
#           Env_details="${Models[1]}"
#           #sh ./host.sh "${envir[@]}"
#           #hostd=$(sh ./host.sh )
#           #echo "${host}"
#           list=$(python host.py)
#           echo "model details:$list"
#           Models+=$list
#           echo "::set-output name=Models_details::$Models"
#           echo "::set-output name=Host_details::$host"
#           echo "::set-output name=Environment_details::$Env_details"
#       - name: Print Host_details
#         run: |
#           echo "${{ steps.step2.outputs.Host_details }}"
#           echo "${{ steps.step2.outputs.Environment_details }}"
#           echo "${{ steps.step2.outputs.Models_details }}"

#       - name: test the models 
#         shell: bash
#         env:
#            envir: "${{ steps.step1.outputs.env_details }}"
#            models_id: "${{steps.step1.outputs.model_details}}"
#            envir_details: "${{ steps.step2.outputs.Environment_details }}"
#         run: |
#          len=${#envir[@]}
#          echo "$len"
#          for (( i=0; i<$len; i++ )); do 
#             if [[ ${models_id[@]} == *"orange."* ]] ; then
#               echo "test the orange models"
#             else
#               echo "no models "
#             fi
#             if [[ ${models_id[@]} == *"apple."* ]] ; then
#               echo "test the apple models"
#             else
#               echo "no models "
#             fi
#          done 
#          pwd
        
#          mkdir new
#          if [[ -d "new" ]]; then
#             touch sam
#             cat sam
#          fi
#       - name: check the models 
#         id: step3
#         shell: bash
#         env:
#            envir: "${{ steps.step1.outputs.env_details }}"
#            models_id: "${{steps.step1.outputs.model_details}}"
#            envir_details: "${{ steps.step2.outputs.Environment_details }}"      
#         run: |
#           ARRAY=()
#            if [[ ${models_id[@]} == *"orange."* ]] ; then
#               ls -lrt 
#               rm -rf /home/runner/work/practice/practice/orange/
#               mkdir /home/runner/work/practice/practice/orange
#               pwd 
#               ls -lrt 
#               cd /home/runner/work/practice/practice/orange/
              
#               #rm -rf /home/runner/work/practice/practice/orange/*
#              # pwd 
#               #ls -lrt          
                      
              
#               git clone  https://github.com/wakaleo/game-of-life.git
              
#              #/usr/bin/git clone git@github.com:suman-aws/practice.git
#              #cd /usr/bin/git 
#              pwd 
#              cd ..
#             #ARRAY=()
#              result=$(python host.py 
#              #pwd     
#              )
#              ARRAY+=$result
#              #echo $result
#              #echo $ARRAY
#              New="${ARRAY[@]}"
#              echo $New
#              echo "::set-output name=uid_details::$New"
             
#            fi 
#            #ARRAY=()
#            #sample() { python host.py
#             #}
#           # $new=$(sample)
#            #ARRAY+=$new
#            #echo "${{ env.sample }}" 
#            #echo $ARRAY
#            #echo "${ARRAY[@]}"
#           if [[ ${models_id[@]} == *"apple."* ]] ; then
#             result=$(#python host.py 
#              pwd     
#              )
#              ARRAY+=$result
#              #echo $result
#              #echo $ARRAY
#              New="${ARRAY[@]}"
#              echo $New
#           fi
#       - name: Print Model_details
#         run: |
#              echo "${{ steps.step3.outputs.uid_details }}"
#       - name: execute python commands 
#         uses: ./.github/workflows/sub.yml
           

        
                    
                   

          
       
          
